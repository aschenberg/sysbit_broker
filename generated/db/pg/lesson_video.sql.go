// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lesson_video.sql

package pg

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateLessonAudio = `-- name: AddOrUpdateLessonAudio :one
INSERT INTO lesson_video (
  lesson_id,
	type,
	url
) VALUES (
  $1,$2,$3
) ON CONFLICT (lesson_id,type) DO UPDATE SET 
url=EXCLUDED.url RETURNING video_id, lesson_id, type, url,
CASE WHEN xmax = 0 THEN 'inserted' ELSE 'updated' END as operation
`

type AddOrUpdateLessonAudioParams struct {
	LessonID int32
	Type     string
	Url      string
}

type AddOrUpdateLessonAudioRow struct {
	VideoID   int32
	LessonID  int32
	Type      string
	Url       string
	Operation string
}

func (q *Queries) AddOrUpdateLessonAudio(ctx context.Context, arg AddOrUpdateLessonAudioParams) (AddOrUpdateLessonAudioRow, error) {
	row := q.db.QueryRow(ctx, addOrUpdateLessonAudio, arg.LessonID, arg.Type, arg.Url)
	var i AddOrUpdateLessonAudioRow
	err := row.Scan(
		&i.VideoID,
		&i.LessonID,
		&i.Type,
		&i.Url,
		&i.Operation,
	)
	return i, err
}

const deleteLessonVideo = `-- name: DeleteLessonVideo :exec
DELETE FROM lesson_video WHERE video_id = $1
`

func (q *Queries) DeleteLessonVideo(ctx context.Context, videoID int32) error {
	_, err := q.db.Exec(ctx, deleteLessonVideo, videoID)
	return err
}

const getLessonVideo = `-- name: GetLessonVideo :many
SELECT a.lesson_id, lesson_code, title, image, video_id, b.lesson_id, type, url FROM lesson as a 
LEFT JOIN lesson_video as b ON a.lesson_id = b.lesson_id
WHERE a.lesson_code = $1
`

type GetLessonVideoRow struct {
	LessonID   int32
	LessonCode string
	Title      string
	Image      string
	VideoID    pgtype.Int4
	LessonID_2 pgtype.Int4
	Type       pgtype.Text
	Url        pgtype.Text
}

func (q *Queries) GetLessonVideo(ctx context.Context, lessonCode string) ([]GetLessonVideoRow, error) {
	rows, err := q.db.Query(ctx, getLessonVideo, lessonCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLessonVideoRow{}
	for rows.Next() {
		var i GetLessonVideoRow
		if err := rows.Scan(
			&i.LessonID,
			&i.LessonCode,
			&i.Title,
			&i.Image,
			&i.VideoID,
			&i.LessonID_2,
			&i.Type,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
